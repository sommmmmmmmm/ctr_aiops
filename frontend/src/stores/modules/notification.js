import { defineStore } from 'pinia'
import { ref } from 'vue'
import { ElNotification } from 'element-plus'

export const useNotificationStore = defineStore('notification', () => {
  // State
  const notifications = ref([])
  const unreadCount = ref(0)
  const alertHistory = ref([])

  // ÏïåÎ¶º Ï∂îÍ∞Ä
  const addNotification = (notification) => {
    const newNotification = {
      id: Date.now(),
      timestamp: new Date(),
      read: false,
      ...notification
    }
    
    notifications.value.unshift(newNotification)
    unreadCount.value++
    
    // ÌûàÏä§ÌÜ†Î¶¨ÏóêÎèÑ Ï†ÄÏû•
    alertHistory.value.unshift(newNotification)
    
    // Element Plus Notification ÌëúÏãú
    showElementNotification(newNotification)
    
    return newNotification
  }

  // Element Plus Notification ÌëúÏãú
  const showElementNotification = (notification) => {
    const typeMap = {
      error: 'error',
      warning: 'warning',
      success: 'success',
      info: 'info'
    }

    ElNotification({
      title: notification.title,
      message: notification.message,
      type: typeMap[notification.type] || 'info',
      duration: notification.persistent ? 0 : 4500,
      showClose: true,
      onClick: () => {
        notification.onClick?.()
      }
    })
  }

  // ÏÑ±Îä• Í≤ΩÍ≥† ÏïåÎ¶º
  const addPerformanceAlert = (metrics) => {
    const { accuracy, f1Score, responseTime } = metrics
    
    // Accuracy < 0.7 Í≤ΩÍ≥†
    if (accuracy < 0.7) {
      addNotification({
        title: '‚ö†Ô∏è ÏÑ±Îä• Í≤ΩÍ≥†',
        message: `Î™®Îç∏ Ï†ïÌôïÎèÑÍ∞Ä ${(accuracy * 100).toFixed(1)}%Î°ú ÌïòÎùΩÌñàÏäµÎãàÎã§. Ïû¨ÌïôÏäµÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.`,
        type: 'warning',
        persistent: true,
        severity: 'high',
        category: 'performance',
        action: {
          label: 'Ïû¨ÌïôÏäµ ÏãúÏûë',
          callback: () => console.log('Trigger retraining')
        }
      })
    }

    // F1 Score Í∏âÎùΩ Í≤ΩÍ≥†
    if (f1Score && f1Score < 0.6) {
      addNotification({
        title: '‚ö†Ô∏è F1 Score Í∏âÎùΩ',
        message: `F1 ScoreÍ∞Ä ${f1Score.toFixed(2)}Î°ú Í∏âÎùΩÌñàÏäµÎãàÎã§.`,
        type: 'warning',
        persistent: true,
        severity: 'high',
        category: 'performance'
      })
    }

    // Ï∂îÎ°† ÏßÄÏó∞ Í≤ΩÍ≥†
    if (responseTime > 500) {
      addNotification({
        title: '‚è±Ô∏è ÏùëÎãµ ÏßÄÏó∞',
        message: `Ï∂îÎ°† ÏãúÍ∞ÑÏù¥ ${responseTime}msÎ°ú Ï¶ùÍ∞ÄÌñàÏäµÎãàÎã§. ÏÑ±Îä• ÏµúÏ†ÅÌôîÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.`,
        type: 'warning',
        severity: 'medium',
        category: 'latency'
      })
    }
  }

  // ÌïôÏäµ ÏôÑÎ£å ÏïåÎ¶º
  const addTrainingCompleteNotification = (runId, metrics) => {
    addNotification({
      title: '‚úÖ ÌïôÏäµ ÏôÑÎ£å',
      message: `ÏÉàÎ°úÏö¥ Î™®Îç∏ ÌïôÏäµÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. Accuracy: ${(metrics.accuracy * 100).toFixed(1)}%`,
      type: 'success',
      category: 'training',
      runId
    })
  }

  // ÌïôÏäµ Ïã§Ìå® ÏïåÎ¶º
  const addTrainingFailedNotification = (runId, error) => {
    addNotification({
      title: '‚ùå ÌïôÏäµ Ïã§Ìå®',
      message: `Î™®Îç∏ ÌïôÏäµ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error}`,
      type: 'error',
      persistent: true,
      category: 'training',
      runId
    })
  }

  // Îç∞Ïù¥ÌÑ∞ drift Í∞êÏßÄ ÏïåÎ¶º
  const addDataDriftAlert = (driftMetrics) => {
    addNotification({
      title: 'üîÑ Îç∞Ïù¥ÌÑ∞ Drift Í∞êÏßÄ',
      message: `ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ Î∂ÑÌè¨Ïóê Î≥ÄÌôîÍ∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. Î™®Îç∏ Ïû¨ÌïôÏäµÏùÑ Í≥†Î†§ÌïòÏÑ∏Ïöî.`,
      type: 'warning',
      severity: 'medium',
      category: 'data_drift',
      details: driftMetrics
    })
  }

  // ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAsRead = (notificationId) => {
    const notification = notifications.value.find(n => n.id === notificationId)
    if (notification && !notification.read) {
      notification.read = true
      unreadCount.value--
    }
  }

  // Î™®Îì† ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
  const markAllAsRead = () => {
    notifications.value.forEach(n => n.read = true)
    unreadCount.value = 0
  }

  // ÏïåÎ¶º ÏÇ≠Ï†ú
  const removeNotification = (notificationId) => {
    const index = notifications.value.findIndex(n => n.id === notificationId)
    if (index !== -1) {
      const notification = notifications.value[index]
      if (!notification.read) {
        unreadCount.value--
      }
      notifications.value.splice(index, 1)
    }
  }

  // Î™®Îì† ÏïåÎ¶º ÏÇ≠Ï†ú
  const clearAll = () => {
    notifications.value = []
    unreadCount.value = 0
  }

  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌïÑÌÑ∞ÎßÅ
  const getNotificationsByCategory = (category) => {
    return notifications.value.filter(n => n.category === category)
  }

  // Ïã¨Í∞ÅÎèÑÎ≥Ñ ÌïÑÌÑ∞ÎßÅ
  const getNotificationsBySeverity = (severity) => {
    return notifications.value.filter(n => n.severity === severity)
  }

  // ÏµúÍ∑º ÏïåÎ¶º Í∞ÄÏ†∏Ïò§Í∏∞
  const getRecentNotifications = (limit = 10) => {
    return notifications.value.slice(0, limit)
  }

  return {
    // State
    notifications,
    unreadCount,
    alertHistory,
    
    // Actions
    addNotification,
    addPerformanceAlert,
    addTrainingCompleteNotification,
    addTrainingFailedNotification,
    addDataDriftAlert,
    markAsRead,
    markAllAsRead,
    removeNotification,
    clearAll,
    
    // Getters
    getNotificationsByCategory,
    getNotificationsBySeverity,
    getRecentNotifications
  }
})

